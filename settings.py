"""
Django settings for chat-api project.

Generated by 'django-admin startproject' using Django 2.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""
import json
import os
import sys
import environ
import io

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
root = environ.Path(__file__)
env = environ.Env(
    DEBUG=(bool, False),
)
environ.Env.read_env()

# Add local libs to path
sys.path.insert(0, os.path.join(BASE_DIR, 'lib'))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'LvxCcWVsIVqjGSIxXmGtxcyXTHAKUzanEIMJUGDMLgphPcleOF'

DEBUG = False
LOCAL = False

# SECURITY WARNING: don't run with debug turned on in production!
if not os.environ.get('GAE_APPLICATION') or os.environ.get('CHAT_API_DEBUG'):
    DEBUG = True

# SECURITY WARNING: run it only locally, developers debug for queries
if not os.environ.get('GAE_APPLICATION'):
    LOCAL = True


INTERNAL_IPS = "127.0.0.1,localhost,host.docker.internal,0.0.0.0" if LOCAL else ""
DEV_ALLOWED_HOSTS = os.environ.get("MCP_API_DEV_ALLOWED_HOSTS", INTERNAL_IPS).split(",")
DEV_ALLOWED_HOSTS = [s.strip() for s in DEV_ALLOWED_HOSTS]

ALLOWED_HOSTS = [
    "*"
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'chat_api',
    'chess_api',
    # 'chess_engine',
    # TODO CHANGE TO SPECTACULAR
    'drf_yasg',
    'rest_framework',
]

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'django.server': {
            '()': 'django.utils.log.ServerFormatter',
            'format': '[{server_time}] {message}',
            'style': '{',
        }
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
        },
        'django.server': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'django.server',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', ],
            'level': 'INFO',
        },
        'django.server': {
            'handlers': ['django.server'],
            'level': 'INFO',
            'propagate': False,
        },
        'chat_api': {
            'handlers': ['console', ],
            'level': 'INFO',
        }
    }
}


DEFAULT_RENDERER_CLASSES = (
    'rest_framework.renderers.JSONRenderer',
)
if DEBUG:
    DEFAULT_RENDERER_CLASSES = DEFAULT_RENDERER_CLASSES + (
        'rest_framework.renderers.BrowsableAPIRenderer',
    )

REST_FRAMEWORK = {
    "DEFAULT_RENDERER_CLASSES": DEFAULT_RENDERER_CLASSES,
    "DEFAULT_FILTER_BACKENDS": ["django_filters.rest_framework.DjangoFilterBackend"],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "PAGE_SIZE": 100,
}

SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'Bearer': {
            'description': 'Our firebase api token, used to authenticate, Bearer prefix required before token',
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header'
        }
    }
}

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # FIXME: Should only be added in dev env
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_cprofile_middleware.middleware.ProfilerMiddleware',
]

CORS_LOCAL = (
    [
        "http://localhost:3000",
        "http://127.0.0.1:3000",
    ]
    if LOCAL
    else []
)
CORS_ORIGIN_WHITELIST = [
    *CORS_LOCAL,
    "https://chat-api-432810.web.app",
    "https://chat-api-432810.firebaseapp.com",
    "https://chess.sidzinski.click",
]

CORS_ALLOW_HEADERS = [
    "*",
]

if LOCAL:
    MIDDLEWARE.append('querycount.middleware.QueryCountMiddleware')

base_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
firebase_cert_str = os.environ.get("FIREBASE_CERT")
if firebase_cert_str:
    FIREBASE_CERT = json.loads(firebase_cert_str)
else:
    firebase_cert_path = os.path.join(base_dir, 'firebase-cert.json')
    if os.path.exists(firebase_cert_path):
        with open(firebase_cert_path) as f:
            FIREBASE_CERT = json.loads(f.read())

ROOT_URLCONF = 'urls'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('CHAT_API_DB_NAME', 'chat_api'),
        'USER': os.environ.get('CHAT_API_DB_USER', 'chat_api'),
        'PASSWORD': os.environ.get('CHAT_API_DB_PASSWORD', 'chat_api'),
        "HOST": os.environ.get(
            "EAT_SOUS_DB_GCP_HOST",
            os.environ.get("EAT_SOUS_DB_HOST", "0.0.0.0"),
        ),
        'PORT': os.environ.get('CHAT_API_DB_PORT', '5432'),
        'CONN_MAX_AGE': 0,
    }
}

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/v1/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
            "loaders": [
                "django.template.loaders.filesystem.Loader",
                "django.template.loaders.app_directories.Loader",
            ],
        },
    }
]


DEFAULT_AUTO_FIELD = "django.db.models.AutoField"
AUTH_USER_MODEL = "chat_api.User"

REACT_APP_URL = os.environ.get("REACT_APP_URL")

SENDGRID_CONFIG = {
    "API_KEY": os.environ.get("SENDGRID_API_KEY"),
    "FROM_EMAIL": os.environ.get("SENDGRID_FROM_EMAIL"),
    "TEMPLATES": {
        "RESET_PASSWORD": os.environ.get("SENDGRID_RESET_PASSWORD_TEMPLATE_ID"),
        "INVITATION": os.environ.get("SENDGRID_INVITATION_TEMPLATE_ID"),
    },
}

TF_SERVICE_URL = "http://tf_service:8000"
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')